{"version":3,"file":"./assets/js/dist/mpp-activity-uploader.js","mappings":"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","sources":["webpack://mediapress/./assets/js/src/utils/functions.js","webpack://mediapress/external window \"jQuery\"","webpack://mediapress/external window \"mpp\"","webpack://mediapress/webpack/bootstrap","webpack://mediapress/webpack/runtime/compat get default export","webpack://mediapress/webpack/runtime/define property getters","webpack://mediapress/webpack/runtime/hasOwnProperty shorthand","webpack://mediapress/./assets/js/mpp-activity-uploader.js"],"sourcesContent":["\n/**\n * Get the  value of a query parameter from the url\n *\n * @param param string the query var to be found.\n * @param queryString the query string.\n * @returns string\n */\nfunction getQueryParameter(param, queryString) {\n    var items;\n\n    if (typeof queryString === \"undefined\" || !queryString.length) {\n        return false;\n    }\n\n    var data_fields = queryString.split('&');\n\n    for (var i = 0; i < data_fields.length; i++) {\n\n        items = data_fields[i].split('=');\n\n        if (items[0] == param) {\n            return items[1];\n        }\n    }\n\n    return false;\n}\n/**\n * Extract a query variable from url\n *\n * @param param string\n * @param url string\n * @returns {Boolean|String|mixed}\n */\nfunction getURLParameter(param, url) {\n    let chunks = url.split('?');\n    return getQueryParameter(param, chunks.length > 1 ? chunks[1] : '');\n}\nexport {getQueryParameter, getURLParameter};","module.exports = window[\"jQuery\"];","module.exports = window[\"mpp\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","import jQuery from 'jquery';\nimport {getQueryParameter} from \"./src/utils/functions\";\nimport \"./mpp-uploader\";\n\n(function ($) {\n    // private copy to avoid user modifications.\n    const uploadSettings = _.clone(_mppUploadSettings),\n        utils = mpp.mediaUtils;\n\n    $(document).ready(function () {\n\n        let $postSubmitBtn = $('#aw-whats-new-submit'),\n            $uploadButtonsContainer = $('#mpp-activity-upload-buttons'),\n            $activityFormOptions = $('#whats-new-options'),\n            context = 'activity',\n            extensions = utils.getExtensions( uploadSettings.current_type );\n\n        // Move the buttons if the elemt exists.\n        if ($uploadButtonsContainer.length && $activityFormOptions.length) {\n            $activityFormOptions.prepend($uploadButtonsContainer);\n        }\n\n        let activityUploader = new mpp.Uploader('activity', {\n            el: '#mpp-upload-dropzone-activity',\n            url: uploadSettings.url,\n            params: _.extend({}, uploadSettings.params, {'context': context}),\n            allowedFileTypes: utils.prepareExtensions(extensions),\n            addRemoveLinks: true,\n            events: {\n                error: function () {\n                    $postSubmitBtn.prop('disabled', false);\n                }, complete: function () {\n                    $postSubmitBtn.prop('disabled', false);\n                },\n                allAdded: function () {\n                    $postSubmitBtn.prop('disabled', true);\n                }\n            }\n        });\n\n        // initialize.\n        activityUploader.init();\n\n        // When any of the media icons(audio/video etc) is clicked\n        // show the dropzone\n        $(document).on('click', '#mpp-activity-upload-buttons a', function () {\n            if( activityUploader.isAttached() ) {\n                //set current type as the clicked button\n                uploadSettings.current_type = $(this).data('media-type');\n                //use id as type detector , may be photo/audio/video\n                utils.setupUploaderFileTypes(activityUploader,  uploadSettings.current_type );\n                activityUploader.refresh();\n                activityUploader.showUI();\n                // option to disable in 1.4.0\n                uploadSettings.activity_disable_auto_file_browser = parseInt(uploadSettings.activity_disable_auto_file_browser, 10);\n                if (!uploadSettings.activity_disable_auto_file_browser) {\n                    activityUploader.openFileChooser();//simulate click;\n                }\n            }\n\n            $('.mpp-remote-add-media-row-activity').show();\n\n            return false;\n        });\n\n        // Enable closing of the dropzone and clearing the queue for activity post form upload.\n        $(document).on('click', '.mpp-activity-new-media-container .mpp-upload-container-close', function () {\n            activityUploader.hideUI();\n            activityUploader.refresh();\n            return false;\n        });\n\n        // Intercept the ajax actions to check if there was an upload from activity\n        // if yes, when it is complete, hide the dropzone\n            $(document).ajaxSend(function (event, jqxhr, settings) {\n\n                let action = getQueryParameter('action', settings.data);\n                let attached_media = null, uploader = null;\n                switch ( action ) {\n\n                    case 'post_update':\n                    case 'swa_post_update':\n                        uploader = activityUploader;\n                        break;\n\n                    case 'new_activity_comment':\n                        let formID = getQueryParameter('form_id', settings.data);\n                        uploader = getUploader( getUploaderIDForActivity( formID));\n                        break;\n                }\n\n                if( uploader) {\n                    //uploader.debug();\n                    attached_media = uploader.getUploadedMediaIDs().join(',');\n                    if( attached_media ) {\n                        settings.data = settings.data + '&mpp-attached-media=' + attached_media;\n                        uploader.reset();\n                    }\n                }\n            });\n\n            // On ajax complete, hide the uploader ui.\n            $(document).ajaxComplete(function (evt, xhr, options) {\n\n                let action = getQueryParameter('action', options.data);\n                //switch\n                switch (action) {\n                    case 'post_update':\n                    case 'swa_post_update':\n                        $('.mpp-remote-add-media-row-activity').hide();\n                        activityUploader.hideUI();\n                        activityUploader.refresh();\n                        break;\n                    case 'new_activity_comment':\n                        let uploader = getUploader( getUploaderIDForActivity( getQueryParameter('form_id', options.data)));\n                        if( uploader ) {\n                            uploader.hideUI();\n                            uploader.refresh();\n                        }\n                        break;\n                }\n            });\n\n\n        /// -------------------- Activity Comment Uploading ------- ///\n\n        // When any of the media icons(audio/video etc) is clicked\n        //show the dropzone\n        $(document).on('click', '.mpp-activity-comment-upload-buttons a', function () {\n            let $this= $(this),\n                $btnContainer = $this.closest('.mpp-activity-comment-upload-buttons'),\n                $activityItem = $btnContainer.closest('.comment-item'),\n                activityID= $btnContainer.length? $btnContainer.data('activity-id') : 0,\n                commentID = 0,\n                currentType = $this.data('media-type');\n\n            // try to find comment ID\n            if($activityItem.length ) {\n                commentID = $activityItem.data('bp-activity-comment-id');\n            }\n\n            mpp_log('Activity: '+activityID, ' , Comment ID: '+commentID );\n\n            let uploaderID = getUploaderIDForActivity(activityID);\n            let uploader = getUploader(uploaderID);\n\n            // if uploader does exist, we should destroy it if the comment id is different\n\n            if (uploader ) {\n                if (uploader.getParam('comment_id') != commentID) {\n                    uploader.destroy();\n                    uploader = null;\n                } else if( uploader.type && uploader.type !== currentType ){\n                   // mpp_log(\"Current type:\"+ currentType + 'OLD Type='+uploader.type);\n                    utils.setupUploaderFileTypes(uploader, currentType );\n                }\n            }\n\n            if( ! uploader ) {\n                uploader = new mpp.Uploader(uploaderID, {\n                    el: '#mpp-upload-dropzone-activity-comment-' + activityID,\n                    url: uploadSettings.url,\n                    params: _.extend({}, uploadSettings.params, {context: 'activity-comment', activity_id: activityID}),\n                    allowedFileTypes: utils.prepareExtensions(utils.getExtensions(currentType)),\n                    addRemoveLinks: true,\n                    help: {\n                        allowedFileType: uploadSettings.allowed_type_messages[currentType],\n                        fileSize: uploadSettings.max_allowed_file_size?  uploadSettings.max_allowed_file_size : '',\n                        browse:'',\n                    },\n                    events: {\n                        error: function () {\n                            //$postSubmitBtn.prop('disabled', false);\n                        }, complete: function () {\n                            //  $postSubmitBtn.prop('disabled', false);\n                        },\n                        allAdded: function () {\n                            // $postSubmitBtn.prop('disabled', true);\n                        }\n                    }\n                });\n                uploader.type = currentType;\n                uploader.init();\n            }\n\n            uploader.setParam('comment_id', commentID);\n\n            if( uploader.isAttached() ) {\n                uploader.showUI();\n                // option to disable in 1.4.0\n                uploadSettings.activity_disable_auto_file_browser = parseInt(uploadSettings.activity_disable_auto_file_browser, 10);\n                if (!uploadSettings.activity_disable_auto_file_browser) {\n                    uploader.openFileChooser();//simulate click;\n                }\n            }\n\n            return false;\n        });\n\n        // Enable closing of the dropzone and clearing the queue on close.\n        $(document).on('click', '.mpp-activity-comment-new-media-container .mpp-upload-container-close', function () {\n            let activityID = $(this).data('activity-id');\n            if( ! activityID ) {\n                return false;\n            }\n\n            let uploaderID = getUploaderIDForActivity(activityID);\n            let uploader = getUploader(uploaderID);\n\n            if( uploader ) {\n                uploader.hideUI();\n                uploader.refresh();\n            }\n\n            return false;\n        });\n\n        // whenever a comment reply button is clicked, we need to destroy the previous uploader attached with this activity\n        $(document).on('click', '.acomment-reply', function() {\n\n            let activityID = $(this).closest('.activity-item').data('bp-activity-id');\n            let uploader = getUploader(getUploaderIDForActivity(activityID));\n\n            if(uploader ) {\n                uploader.hideUI();\n                uploader.destroy();\n            }\n        });\n    });\n\n    function getUploaderIDForActivity(activityID) {\n        return 'mpp-activity-uploader-'+activityID;\n    }\n\n    function getUploader(id) {\n        return _mppUploaders[id] ? window._mppUploaders[id]: null;\n    }\n\n    function mpp_log(...arg) {\n        console.log(...arg);\n    }\n})(jQuery);\n"],"names":["getQueryParameter","param","queryString","items","length","data_fields","split","i","module","exports","window","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","$","uploadSettings","_","clone","_mppUploadSettings","utils","mpp","mediaUtils","getUploaderIDForActivity","activityID","getUploader","id","_mppUploaders","document","ready","$postSubmitBtn","$uploadButtonsContainer","$activityFormOptions","extensions","getExtensions","current_type","prepend","activityUploader","Uploader","el","url","params","extend","allowedFileTypes","prepareExtensions","addRemoveLinks","events","error","complete","allAdded","init","on","isAttached","this","data","setupUploaderFileTypes","refresh","showUI","activity_disable_auto_file_browser","parseInt","openFileChooser","show","hideUI","ajaxSend","event","jqxhr","settings","attached_media","uploader","getUploadedMediaIDs","join","reset","ajaxComplete","evt","xhr","options","hide","$this","$btnContainer","closest","$activityItem","commentID","currentType","console","log","mpp_log","uploaderID","getParam","destroy","type","context","activity_id","help","allowedFileType","allowed_type_messages","fileSize","max_allowed_file_size","browse","setParam","jQuery"],"sourceRoot":""}