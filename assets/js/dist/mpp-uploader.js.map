{"version":3,"file":"./assets/js/dist/mpp-uploader.js","mappings":"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","sources":["webpack://mediapress/./assets/js/src/uploader.js","webpack://mediapress/./assets/js/src/utils/event-registry.js","webpack://mediapress/./assets/js/src/utils/media-utils.js","webpack://mediapress/external window \"Dropzone\"","webpack://mediapress/external window \"_\"","webpack://mediapress/external window \"jQuery\"","webpack://mediapress/webpack/bootstrap","webpack://mediapress/webpack/runtime/compat get default export","webpack://mediapress/webpack/runtime/define property getters","webpack://mediapress/webpack/runtime/hasOwnProperty shorthand","webpack://mediapress/webpack/runtime/make namespace object","webpack://mediapress/./assets/js/mpp-uploader.js"],"sourcesContent":["\n// If you are using JavaScript/ECMAScript modules:\nimport _ from 'underscore';\nimport $ from 'jquery';\nimport Dropzone from 'dropzone';\n\nimport EventRegistry from './utils/event-registry';\n// Keeps track of the uploader.\nwindow._mppUploaders = window._mppUploaders || {};\nexport default class Uploader {\n\n    constructor(id, args) {\n        this.id = id;\n\n        this.mediaType = args.mediType|| '';\n\n        this.allowedFileTypes = args.allowedFileTypes || null;\n\n        this.params = args.params || {};\n        let l10n = args.l10n | {};\n        delete(args.l10n);\n\n        this.$el = null;\n        this.$container = null;\n        this.$wrapper = null;\n        this.$feedback = null;\n        this.isResetting = false;\n        this.settings = _.extend({}, {\n                'paramName': '_mpp_file',\n                'showFeedback': true,\n            },\n            l10n,\n            args,\n        );\n\n        // default events map if passed.\n        this._events = ( args.events && _.isObject(args.events) ) ? args.events : {};\n        // keeps a list of all registered events and associated callbacks.\n        this._eventRegistry = new EventRegistry();\n\n        this._dropzone = null;\n        // is the Uploader enabled?\n        this._isEnabled = !!args.isEnabled;\n        this._initialized = false;\n        window._mppUploaders[this.id] = this;\n    }\n\n    // Initialize uploader.\n    init() {\n        // should we test if the uploader was initialized earlier?\n\n        if( this._initialized ) {\n            return false;\n        }\n\n        if( ! this.settings.el ) {\n            return false;\n        }\n\n        this.$el = $(this.settings.el);\n\n        if( ! this.$el.length ) {\n            return false;\n        }\n\n        this.$container = this.$el.parents('.mpp-media-upload-container');\n        this.$wrapper = this.$el.parents('.mpp-new-media-container');\n        this.$feedback = this.$container.find('.mpp-feedback ul');\n\n        this._initialized = true;\n        this._createDropzone();\n        this._bindEvents();\n\n        if( this.settings.help) {\n            this.updateHelpMessages(this.settings.help);\n        }\n    }\n\n    updateHelpMessages(helpMessage) {\n        if (!this.$container || !this.$container.length) {\n            return;\n        }\n\n        if (helpMessage.browse) {\n            this.$container.find('.dz-default .dz-button').html(helpMessage.browse);\n        }\n\n        if (helpMessage.allowedFileType) {\n            this.$container.find('.mpp-uploader-allowed-file-type-info').html(helpMessage.allowedFileType);\n        }\n\n        if (helpMessage.allowedFileType) {\n            this.$container.find('.mpp-uploader-allowed-max-file-size-info').html(helpMessage.fileSize);\n        }\n\n        this.showHelpMessages();\n    }\n\n    showHelpMessages() {\n        if (!this.$container || !this.$container.length) {\n            return;\n        }\n        this.$container.find('.mpp-dropzone-upload-help').show();\n    }\n\n    hideHelpMessages() {\n        if (!this.$container || !this.$container.length) {\n            return;\n        }\n        this.$container.find('.mpp-dropzone-upload-help').hide();\n    }\n\n\n    /**\n     * Creates a new dropzone.\n     */\n    _createDropzone() {\n        // when creating dropzone, use the\n        this.settings.acceptedFiles = this.allowedFileTypes;\n        //this.settings.accept = this.settings.accept || this.accept.bind(this);\n        this._dropzone = new Dropzone(this.$el.get(0), this.settings);\n    }\n\n    /**\n     * Binds various events.\n     */\n    _bindEvents() {\n\n        // attach extra parameters to Request when a new request is being created.\n        this.on('sending' , this._appendParametersToRequest.bind(this));\n        // on success.\n        this.on('success' , this._onSuccess.bind(this));\n        //on upload error.\n        this.on('error' , this._onError.bind(this));\n        // when the remove is clicked.\n        this.on('removedfile' , this._onFileRemove.bind(this));\n\n        let events = this._events || {};\n\n        for( let event in events ) {\n            let callback = events[event];\n            this.on(event ,callback);\n        }\n    }\n\n    accept(file, done) {\n    }\n\n    _onFileRemove(file ) {\n        if( ! file.attachmentID ) {\n            this.cleanFeedback(file);\n                return;\n        }\n\n        if( ! this.isResetting ) {\n            this._deleteMedia( file.attachmentID );\n        }\n    }\n\n    /// Trigger delete, deletes any trace of a Media\n    _deleteMedia (id) {\n\n        if (!id) {\n            return false;\n        }\n\n        let nonce = this.settings.params.deleteMediaNonce? this.settings.params.deleteMediaNonce: this.settings.params._wpnonce;\n\n        $.post(ajaxurl, {\n            action: 'mpp_delete_media',\n            media_id: id,\n            cookie: encodeURIComponent(document.cookie),\n            _wpnonce: nonce\n        }, function (response) {\n\n            if (typeof  response.success !== \"undefined\") {\n                mpp.notify(response.message);\n            } else {\n                mpp.notify(response.message);\n            }\n\n        }, 'json');\n\n        return false;\n    }\n\n    _onSuccess(file, response, e) {\n\n        if( ! _.isObject(response)) {\n            response = JSON.parse( response);\n        }\n\n        // Save file's attachmentID.\n        if( response.success ) {\n            file.attachmentID = response.data.id;\n        }\n        //let data = response.data;\n        //console.log(data.filename);\n    }\n\n    _onError(file, response, e ) {\n\n        if( ! _.isObject( response) || ! file.previewElement ) {\n            return;\n        }\n\n        let message;\n        file.previewElement.classList.add(\"dz-error\");\n\n        if (response.data && response.data.message ) {\n            message = response.data.message;\n        } else {\n            message = \"There was an issue uploading\";\n        }\n\n        for (let node of file.previewElement.querySelectorAll(\n            \"[data-dz-errormessage]\"\n        )) {\n            node.textContent = message;\n        }\n\n        this.$feedback.append(\n         `<li id=\"mpp-upload-feedback-${file.upload.uuid}\">${message}</li>`\n        );\n    }\n\n    _appendParametersToRequest(file, xhr, formData ) {\n\n        for( let paramName in this.params ) {\n            formData.set( paramName, this.params[paramName]);\n        }\n    }\n\n    cleanFeedback(file) {\n        this.$feedback.find(`#mpp-upload-feedback-${file.upload.uuid}`).remove();\n    }\n\n    /**\n     *\n     * @param event  name or map of event:callback\n     * @param callback Optional callback if event name is passed as first parameter.\n     * @returns {Uploader}\n     */\n    on(event, callback) {\n\n        if( ! this._dropzone) {\n           return this;\n        }\n\n        if( _.isObject( event ) ) {\n            for ( let evt in event) {\n                this._dropzone.on(event , event[evt]);\n                this._eventRegistry.add(event, event[evt]);\n            }\n        } else {\n            this._dropzone.on(event , callback);\n            this._eventRegistry.add(event, callback);\n        }\n\n        return this;\n    }\n\n    off(event, callback ) {\n\n        if (  this._dropzone) {\n            this._dropzone.off(event , callback);\n            this._eventRegistry.remove(event, callback);\n        }\n\n        return this;\n    }\n\n    getAttachedEvents(eventName) {\n        return this._eventRegistry.get(eventName);\n    }\n\n    getRegisteredEvents() {\n        return this._eventRegistry.getAll();\n    }\n\n    getAttachedCallbacks(event) {\n        return this._eventRegistry.get(event);\n    }\n\n    getMediaType() {\n        return this.mediaType;\n    }\n\n    setMediaType( type ) {\n        this.mediaType = type;\n    }\n\n    getAllowedFileTypes() {\n        return this.allowedFileTypes;\n    }\n\n    setAllowedFileTypes( types ) {\n        this.allowedFileTypes = _.isArray( types ) ? types.join(',') : types;\n    }\n\n    getParam(name) {\n        return this.params[name] || null;\n    }\n\n    setParam(name, val ) {\n       this.params[name] = val;\n       return this;\n    }\n\n    getParams() {\n        return this.params;\n    }\n\n    setParams(params) {\n        this.params = params;\n        return this;\n    }\n\n    getSettings() {\n        return this.settings;\n    }\n\n    updateSettings(settings) {\n        this.settings = _.isObject( settings ) ? settings : this.settings;\n    }\n\n    isEnabled() {\n      return  this._isEnabled;\n    }\n\n    disable() {\n        if( this._dropzone ) {\n            this._dropzone.disable();\n            this._isEnabled = false;\n        }\n    }\n\n    enable() {\n        if( this._dropzone ) {\n            this._dropzone.enable();\n        }\n    }\n\n    reset() {\n        this.isResetting = true;\n       // this.params = {};\n       // this.context = '';\n        if( this._dropzone) {\n            this._dropzone.removeAllFiles(true);\n        }\n\n        if (this.$wrapper && mpp && mpp.mediaUtils) {\n            mpp.mediaUtils.resetAttachedMedia(this.$wrapper);\n        }\n        this.isResetting = false;\n    }\n\n    destroy() {\n        this.isResetting = true;\n        if (this._dropzone) {\n            this._dropzone.destroy();\n        }\n        this._initialized = false;\n        delete window._mppUploaders[this.id];\n        this.isResetting = false;\n    }\n\n    /**\n     * Prints debug information.\n     */\n    debug() {\n\n        for ( let key in this) {\n            // do not print functions\n            // dom reference(non serializable)\n            // dropzone object(non serializable)\n            if( '$'=== key[0] || '_dropzone' === key ||  _.isFunction(this[key])) {\n                continue;\n            }\n\n           // console.log( key + '=>' + JSON.stringify( this[key] ) );\n        }\n    }\n    getUploadedFiles() {\n        if( this._dropzone){\n            return this._dropzone.getFilesWithStatus(Dropzone.SUCCESS);\n        }\n        return [];\n    }\n\n    //Get all successful uploaded media ids\n    getUploadedMediaIDs() {\n        let mediaIDs = [], files = this.getUploadedFiles();\n        for (let file of files) {\n            if (!file.attachmentID) {\n                continue;\n            }\n\n            mediaIDs.push(file.attachmentID);\n        }\n        // include any appended media via other means(remote-media uses it currently).\n        if (this.$wrapper && mpp && mpp.mediaUtils) {\n            let attachedMediaIDs = mpp.mediaUtils.getAttachedMedia(this.$wrapper);\n            for (let mediaID of attachedMediaIDs) {\n                if (!mediaID) {\n                    continue;\n                }\n                mediaIDs.push(mediaID);\n            }\n        }\n\n        // also, we need to check for the\n        return mediaIDs;\n    }\n\n    refresh() {\n        if( this._dropzone) {\n            this.isResetting = true;\n            this._dropzone.removeAllFiles(true);\n            this.update({'allowedFileTypes': this.allowedFileTypes});\n            this.isResetting = false;\n        }\n    }\n    // Hides the UI.\n    hideUI() {\n        if( ! this.$wrapper ) {\n            return;\n        }\n\n        this.$wrapper.slideUp('slow', function () {\n            $(this).removeClass('mpp-new-media-container-active').addClass('mpp-new-media-container-inactive');\n        });\n    }\n\n    // Shows Ui back.\n    showUI() {\n\n        if( ! this.$wrapper ) {\n            return;\n        }\n\n        this.$wrapper.slideDown('slow', function () {\n            $(this).removeClass('mpp-new-media-container-inactive').addClass('mpp-new-media-container-active');\n        });\n\n        //this.$container.show();\n    }\n\n    isAttached() {\n        return !!this.$el;\n    }\n\n    openFileChooser(){\n        if( this._dropzone && this._dropzone.clickableElements.length ) {\n            let $el =$( this._dropzone.clickableElements[this._dropzone.clickableElements.length-1]).first();\n            if( $el.length ) {\n             $el.click();\n            }\n        }\n    }\n\n    update(options) {\n        let dropzone = this._dropzone;\n\n        if (!dropzone) {\n            return false;\n        }\n\n        if( options.allowedFileTypes ) {\n            this.settings.allowedFileTypes = options.allowedFileTypes;\n            dropzone.options.acceptedFiles = options.allowedFileTypes ;\n            dropzone.hiddenFileInput.setAttribute(\n                \"accept\",\n                dropzone.options.acceptedFiles\n            );\n        }\n\n        if( options.dictInvalidFileType ) {\n            dropzone.options.dictInvalidFileType = options.dictInvalidFileType;\n        }\n\n        return true;\n    }\n}\n","\n/// Event helper is based on Dropzone.js's Emitter class\n// @see https://github.com/dropzone/dropzone/blob/main/src/emitter.js\nexport default class EventRegistry {\n\n    constructor() {\n        this._callbacks = {};\n    }\n\n    // Add an event listener for given event\n    add(event, fn) {\n        // Create namespace for this event\n        if (!this._callbacks[event]) {\n            this._callbacks[event] = [];\n        }\n        this._callbacks[event].push(fn);\n        return this;\n    }\n\n    // Remove event listener for given event. If fn is not provided, all event\n    // listeners for that event will be removed. If neither is provided, all\n    // event listeners will be removed.\n    remove(event, fn) {\n        if (!this._callbacks || arguments.length === 0) {\n            this._callbacks = {};\n            return this;\n        }\n\n        // specific event\n        let callbacks = this._callbacks[event];\n        if (!callbacks) {\n            return this;\n        }\n\n        // remove all handlers\n        if (arguments.length === 1) {\n            delete this._callbacks[event];\n            return this;\n        }\n\n        // remove specific handler\n        for (let i = 0; i < callbacks.length; i++) {\n            let callback = callbacks[i];\n            if (callback === fn) {\n                callbacks.splice(i, 1);\n                break;\n            }\n        }\n\n        return this;\n    }\n\n    get(event) {\n        // specific event\n        let callbacks = this._callbacks[event];\n        if (!callbacks) {\n            return null;\n        }\n\n        return callbacks;\n    }\n\n    getAll() {\n        return this._callbacks;\n    }\n}\n","\nimport $ from 'jquery';\nimport _ from 'underscore';\n\nwindow._mppUploadSettings = window._mppUploadSettings || {};\n// private copy to avoid user modifications.\nconst uploadSettings = _.clone(_mppUploadSettings);\n\n/**\n * Retrieves acceptable file extensions for the given media type.\n *\n * @param {string} type media type(photo,video,audio etc).\n * @returns {string} comma separated file extension.\n */\nfunction getExtensions( type ) {\n    let typeInfo =  ( type && uploadSettings.types && uploadSettings.types[type] ) ? uploadSettings.types[type] : {};\n    return  ( typeInfo && typeInfo.extensions ) ? typeInfo.extensions : '';\n}\n\n/**\n * Set the accepted file types for the uploader.\n *\n * @param {mpp.Uploader} uploader uploader instance.\n *\n * @param {string} type media type('photo', 'audio', 'video' etc ).\n */\nfunction setupUploaderFileTypes(uploader, type) {\n\n    if (!uploadSettings || !uploadSettings.types) {\n        return;\n    }\n\n    if ( ! type && uploadSettings.current_type ) {\n        type = uploadSettings.current_type;\n    }\n\n    //if type is still not defined, go back\n    if ( !type ) {\n        return;\n    }\n    uploader.type = type;\n\n    uploader.setAllowedFileTypes(prepareExtensions(getExtensions(type)));\n    let allowedTypeMessage = uploadSettings.allowed_type_messages[type];\n    let broseMessage = uploadSettings.type_browser_messages[type];\n\n    uploader.updateHelpMessages({\n        browse: broseMessage,\n        fileSize: uploadSettings.max_allowed_file_size,\n        allowedFileType: allowedTypeMessage\n    });\n}\n\nfunction prepareExtensions(extension) {\n    if( ! extension || ! extension.length ) {\n        return '';\n    }\n\n    let exts = extension.split(','), preparedExts=[];\n    for( let extension of exts ) {\n        extension = extension.trim();\n\n        if ( ! extension.length ) {\n            continue;\n        }\n\n        if( '.' !== extension[0]) {\n            extension = '.' + extension;\n        }\n        preparedExts.push(extension);\n    }\n\n    return preparedExts.join(',');\n}\n\n/**\n *\n * @returns {Object}Get media attached to the activity form\n */\nfunction getAttachedMedia( $container ) {\n    let media =  $container.data('mpp-attached-media');\n    if( ! media || ! _.isArray(media)) {\n        media = [];\n    }\n\n    return media;\n}\n\n/**\n * Add a media to attachment list\n *\n * @param int media_id\n * @returns {undefined}\n */\nfunction addAttachedMedia($container, media_id) {\n    let attached_media = $container.data('mpp-attached-media');\n\n    if (!attached_media || !_.isArray(attached_media) ) {\n        attached_media = [];\n    }\n\n    attached_media.push(media_id);\n    $container.data('mpp-attached-media', attached_media);\n\n}\n\n/**\n * Remove an attached media id from dom\n *\n * @param int media_id\n * @returns {Boolean}\n */\nfunction removeAttachedMedia($container, media_id) {\n\n    var attached_media = $container.data('mpp-attached-media');\n\n    if (!attached_media) {\n        return false;\n    } else {\n        //attached_media = attached_media.split(',');\n        attached_media = _.without(attached_media, '' + media_id);\n    }\n\n    $container.data('mpp-attached-media', attached_media);\n}\n\nfunction resetAttachedMedia( $container ) {\n    $container.data('mpp-attached-media', []);\n}\n\nexport {\n    getExtensions,\n    prepareExtensions,\n    setupUploaderFileTypes,\n    getAttachedMedia,\n    addAttachedMedia,\n    removeAttachedMedia,\n    resetAttachedMedia,\n};\n","module.exports = window[\"Dropzone\"];","module.exports = window[\"_\"];","module.exports = window[\"jQuery\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// import for side effects.\nimport Uploader from \"./src/uploader\";\n\nimport * as mediaUtils from './src/utils/media-utils';\n\nlet mpp = window.mpp|| {};\nmpp.Uploader = Uploader;\nmpp.utils = {};\nmpp.mediaUtils = mediaUtils;\nwindow.mpp = mpp;\n"],"names":["window","_mppUploaders","Uploader","constructor","id","args","this","mediaType","mediType","allowedFileTypes","params","l10n","$el","$container","$wrapper","$feedback","isResetting","settings","_","_events","events","_eventRegistry","EventRegistry","_dropzone","_isEnabled","isEnabled","_initialized","init","el","$","length","parents","find","_createDropzone","_bindEvents","help","updateHelpMessages","helpMessage","browse","html","allowedFileType","fileSize","showHelpMessages","show","hideHelpMessages","hide","acceptedFiles","Dropzone","get","on","_appendParametersToRequest","bind","_onSuccess","_onError","_onFileRemove","event","callback","accept","file","done","attachmentID","_deleteMedia","cleanFeedback","nonce","deleteMediaNonce","_wpnonce","ajaxurl","action","media_id","cookie","encodeURIComponent","document","response","success","mpp","notify","message","e","JSON","parse","data","previewElement","classList","add","node","querySelectorAll","textContent","append","upload","uuid","xhr","formData","paramName","set","remove","evt","off","getAttachedEvents","eventName","getRegisteredEvents","getAll","getAttachedCallbacks","getMediaType","setMediaType","type","getAllowedFileTypes","setAllowedFileTypes","types","join","getParam","name","setParam","val","getParams","setParams","getSettings","updateSettings","disable","enable","reset","removeAllFiles","mediaUtils","resetAttachedMedia","destroy","debug","key","getUploadedFiles","getFilesWithStatus","getUploadedMediaIDs","mediaIDs","files","push","attachedMediaIDs","getAttachedMedia","mediaID","refresh","update","hideUI","slideUp","removeClass","addClass","showUI","slideDown","isAttached","openFileChooser","clickableElements","first","click","options","dropzone","hiddenFileInput","setAttribute","dictInvalidFileType","_callbacks","fn","arguments","callbacks","i","splice","_mppUploadSettings","uploadSettings","getExtensions","typeInfo","extensions","setupUploaderFileTypes","uploader","current_type","prepareExtensions","allowedTypeMessage","allowed_type_messages","broseMessage","type_browser_messages","max_allowed_file_size","extension","exts","split","preparedExts","trim","media","addAttachedMedia","attached_media","removeAttachedMedia","module","exports","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","o","Object","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","utils"],"sourceRoot":""}